<?xml version="1.0" encoding="UTF-8"?>
<!--
	'run_tests' target installs protractor if it is not installed and  then runs protractor

	If you set 'sauceUser' and 'sauceKey' in protractorConfig.js the  tests will run on sauceLabs.

	To run on jenkins with saucelabs use 'run_tests' .
 	

-->
<project  default="run_tests">

	<!-- default properties -->


	<target name ="run_tests" depends="run_ui_tests, run_unit_tests, run_load_tests"/>

	<!-- checks if used dependencies from package.json are outdated .Should be used manualy from time to time-->
	<target name="check_outdated">
		<exec executable="bash" dir="${basedir}" osfamily="unix"
					failonerror="true">
					<arg value="-c"/>
					<arg value="npm outdated"/>
		</exec>
		<exec executable="cmd" dir="${basedir}" osfamily="windows"
					failonerror="true">
					<arg value="/c" />
					<arg value="npm"/>
					<arg value="outdated"/>
		</exec>
	</target>
	 <!-- PROTRACTOR INSTALL TASKS -->
	 <!-- used to run install protractor only once -->
	 <target name="protractor_installed_check" >
		<echo message="Checking if protractor is installed."/>
	    <condition property="protractor.installed">
	      <available file="./node_modules" type="dir"/>
	    </condition>
	</target>

	<target name="load_properties">
	   <echo message="Loading properties."/>
	   <property file="test_properties.properies"/>

	   <!-- default value if not applied -->
	   <property name="selrunner.dir" value="ui_tests"/>
	   <property name="selrunner.load.dir" value="load_tests"/>
	   <property name="selrunner.load.threads" value="10"/>
	</target>
	 
	 <target name="install_protractor_if_necessary" depends="protractor_installed_check" unless="protractor.installed">
	 	 <antcall target="install_protractor"/>
	 </target>

	<!-- installs protractor with it's dependencies  based on package.json file  run only once-->
	<target name="install_protractor">
		<echo message="Base dir: ${basedir}"/>
		<exec executable="cmd" dir="${basedir}" osfamily="windows"
			failonerror="true">
			<arg line="/c npm config set color false" />
		</exec>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
			failonerror="true">
			<arg value="-c" />
			<arg value="npm config set color false"/>
		</exec>

		<exec executable="cmd" dir="${basedir}" osfamily="windows"
			failonerror="true">
			<arg line="/c npm install" />
		</exec>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
			failonerror="true">
			<arg line="-c" />
			<arg value="npm install"/>
		</exec>
	</target>

	<!-- RUNNING TASKS -->
	<!-- use this target for jenkins and saucelabs .  It does not require selenium webdiver which is 44 mb -->
	<target name="run_unit_tests" depends="load_properties, install_protractor_if_necessary" if="protractor.enabled">
		    <echo message="Run unit tests script started"/>
		    <echo message="basedir ${basedir}/${protractor.dir}"/>
			<echo message="Testing solution: ${protractor.solution.name}"/>

		<exec executable="cmd" dir="${basedir}" osfamily="windows"
					failonerror="true">
					<arg value="/c"/>
					<arg value="node_modules\.bin\protractor"/>
					<arg value="${protractor.conf}"/>
					<arg value="--params.solutionName=${protractor.solution.name}"/>
		</exec>

		<property name="temp1" value="node ./node_modules/.bin/protractor --troubleshoot true ${protractor.conf} --params.solutionName=${protractor.solution.name}"/>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
							failonerror="true">
			                <arg value="-c"/>
							<arg value="${temp1}"/>
		</exec>
	</target>

	<!-- RUNNING TASKS -->
	<!-- run load tests using multiple instance of selenese-runner -->
	<target name="run_load_tests" depends="load_properties" if="selrunner.load.enabled">
		<echo message="Run load tests script started"/>
		<echo message="basedir ${basedir}/${selrunner.load.dir}"/>
		<echo message="solution name ${selrunner.load.solution.name}"/>	 

		<!-- create count list-->
		<script language="javascript">
			<![CDATA[
				var list = "";
				var count = project.getProperty("selrunner.load.threads") || 10;
		 		for (var i=1; i<=count; i++) {
		 			list+= i + ","
		 		}
		 		if (list) {
		 			list = list.substring(0, list.length -1);
		 		}
		 		project.setProperty("load.count", list);
		    ]]>
		</script>

		<!-- Repeat the test for each item in count -->
 		<for param="dir.name" parallel="false" list="${selrunner.load.solution.name}" delimiter=",">
		    <sequential>
 		        <antcall target="run_selenese_load_tests">
 		            <param name="load.solution.name" value="@{dir.name}"/>
 		            <param name="load.count" value="${load.count}"/>
		        </antcall>
		    </sequential>
		 </for>
	</target>

	<!-- run load tests on a solution-->
	<target name="run_selenese_load_tests" depends="get_os_family">
		<!-- check operating system -->
		<if>
		 <isset property="os_window" />
		 <then>
			<property name="selrunner.load.cmd" value="/c java -jar selenese-runner.jar -c ${selrunner.load.conf} ${selrunner.load.dir}\${load.solution.name}\*_test"/>
		 </then>
		 <else>
			<property name="selrunner.load.cmd" value="-jar ./selenese-runner.jar -c ${selrunner.load.conf} ${selrunner.load.dir}/${load.solution.name}/*_test"/>
		 </else>
		</if>

		<!-- run selenese-runner in parallel until count size -->
 		<for param="cmdline" parallel="true" list="${load.count}" delimiter=",">
		    <sequential>
		        <echo message= "${selrunner.load.cmd}"/>
 		        <antcall target="run_selenese">
 		            <param name="selrunner.cmdline" value="${selrunner.load.cmd}"/>
		        </antcall>
		    </sequential>
		 </for>
	</target>

	<!-- RUNNING TASKS -->
	<!-- run selenese for each configuration in selrunner.config.json -->
	<target name="run_ui_tests" depends="get_ui_tests_cmd, set_cmd_windows, set_cmd_unix" if="selrunner.enabled">
		<echo message="Run ui tests script started"/>
		<echo message="basedir ${basedir}/${selrunner.dir}"/>
		<echo message="solution name ${selrunner.solution.name}"/>	 

 		<for param="cmdline" parallel="${selrunner.multithread}" list="${selrunner.cmds}" delimiter=",">
		    <sequential>
		        <echo message= "@{cmdline}"/>
 		        <antcall target="run_selenese">
 		            <param name="selrunner.cmdline" value="@{cmdline}"/>
		        </antcall>
		    </sequential>
		 </for>
	</target>

	<!-- TODO can be improved. get the os family and set the command -->
	<target name="get_os_family">
  		<condition value="true" property="os_window">
		 	<os family="windows"/>
		</condition>
		<condition value="true" property="os_unix">
		 	<os family="unix"/>
		</condition>
		<echo message="family win: ${os_window} - unix ${os_unix}"/>
	</target>

	<target name="set_cmd_windows" if="os_window" depends="get_ui_tests_cmd, get_os_family">
	    <echo message="is Windows" />
	    <property name="selrunner.cmds" value="${selrunner.cmds.windows}"/>
	</target>

	<target name="set_cmd_unix" if="os_unix" depends="get_ui_tests_cmd, get_os_family">
	    <echo message="is Unix" />
	    <property name="selrunner.cmds" value="${selrunner.cmds.unix}"/>
	</target>

	<!-- run selenese-runner from commandline -->
	<target name="run_selenese">
		<!-- <echo message="Run ${selrunner.cmdline}"/> -->

		<exec executable="cmd" dir="${basedir}" osfamily="windows" failonerror="false" resultproperty="exitCode">
			<arg line="${selrunner.cmdline}"/>
		</exec>

		<exec executable="java" dir="${basedir}" osfamily="unix" failonerror="false" resultproperty="exitCode">
			<arg line="${selrunner.cmdline}"/>
		</exec>

		<condition property="tests_failed">
			<and>
				<equals arg1="${selrunner.failonerror}" arg2="true"/>
				<or>
					<equals arg1="${exitCode}" arg2="1"/>
	            	<equals arg1="${exitCode}" arg2="3"/>
	            	<equals arg1="${exitCode}" arg2="4"/>
	            	<equals arg1="${exitCode}" arg2="5"/>
	        	</or>
        	</and>
		</condition>

		<fail if="tests_failed" message="FAILED: Test execution failed for one of the test solutions; see messages above."/>
	</target>

	<!-- Build the command line to execute selenese-runner java -jar selenese-runner.jar -c ${selrunner.conf} [selrunner.config.json] ui_tests/solName/*_test -->
	<target name="get_ui_tests_cmd" depends="load_properties">
		<echo message="this is the base dir ${basedir}"/>
		<script language="javascript">
		<![CDATA[
	 		importClass(java.io.File);
	        importClass(java.io.FileReader);
	        importClass(java.io.BufferedReader);
	        importClass(java.io.FileWriter);
	        importClass(java.io.BufferedWriter);

	        // recursive function to get all files in directory having matching criteria
	       	function getFiles(directoryPath, files) {
	        	var directory = new File(directoryPath);

				var fList = directory.listFiles();
				if (!fList) {
		            return;
				}

	        	// get all the files from a directory
				for (var j=0; j<fList.length; j++) {
				   	var file = fList[j];
				    if (file.isFile()) {
				    	// only test suites with name *_test
				    	var reg = new RegExp(/_test$/)
				    	if (reg.test(file)) {
				    		files.push(file);
				    	}
				    } else if (file.isDirectory()) {
				        getFiles(file.getAbsolutePath(), files);
				    }
				}
			}
	        
	        // read properties from file selrunner.config.json
	        echo = project.createTask("echo");
	        echo.setMessage("Parsing selrunner.config.json");
	        echo.perform();
	        
	        var file = new File("selrunner.config.json");
	        fr = new FileReader(file);
	        br = new BufferedReader(fr);
	        
	        // Read the whole json file.
	        var json = "";
			do {
				var text = br.readLine();
				if (text) {
			    	json += text;
			    }
			} while (text)
			br.close();
	        
	        echo = project.createTask("echo");
	        echo.setMessage("Read selrunner.config.json");
	        echo.perform();

	        // Evaluate the JSON.
	        var struct = eval("(" + json + ")");

	        // TODO get the OS from scripting
	        var cmdsWin = "";
	        var cmdsUnix = "";

	        // Run selenese-runner for each configuration in the selrunner.config.json
	        // It assumes the file is an Array of JSON objects well formatted
	        for (config in struct) {

	        	// Run each test suite in a separate thread
//		        var solutionNames = project.getProperty("selrunner.solution.name").split(",");
//		        for (var i =0; i<solutionNames.length; i++) {

				var cmdLine = "/c java -jar selenese-runner.jar -c " + project.getProperty("selrunner.conf");		// Windows
				var cmdLineUnix = "-jar ./selenese-runner.jar -c " + project.getProperty("selrunner.conf"); 		// Unix
				//"./ui_tests/svyAngularUIBootstrapButtonsRadio_test/angularuibootstrap_buttons_radio_test";	

				// add each option specified in the selrunner.config
		        for (option in struct[config]) {
//		            echo = project.createTask("echo");
//		            echo.setMessage(option + "=" + struct[config][option]);
//		            echo.perform();

		           	cmdLine += " " + option + " " + struct[config][option];
		        }

		        // TODO recursive query in directory. Node or Java ?
		        // TODO for any path replace \\ with Unix /
		        // Search all test suites ending with '_test' for all solution names
		        var testDir = project.getProperty("selrunner.load.dir")
		        var solutionNames = project.getProperty("selrunner.solution.name").split(",");
		        for (var i =0; i<solutionNames.length; i++) {
		        	//cmdLine += " " + testDir + "\\" + solutionNames[i].trim() + "\\*_test";		// Windows
		        	//cmdLineUnix += " " + project.getProperty("basedir") + "/" + testDir + "/" + solutionNames[i].trim() + "/*_test";		// Unix

		           	var files = [];
		           	var filesUnix = [];
				   	var directory = testDir + "\\" + solutionNames[i].trim();
				   	var directoryUnix = testDir + "/" + solutionNames[i].trim();

				   	getFiles(directory, files);
				   	getFiles(directoryUnix, filesUnix);

				   	echo = project.createTask("echo");
		           	echo.setMessage("length " + files.length + " " + filesUnix.length + " " + filesUnix.join(""));
		           	echo.perform();

		        	cmdLine += " " + files.join(" ");			// Windows
		        	cmdLineUnix += " ./" + filesUnix.join(" ")		// Unix
				}

				cmdsWin = cmdsWin + cmdLine + ",";
				cmdsUnix = cmdsUnix + cmdLineUnix + ",";

//		       	}
	        }

	        // remove comma from last item
	        if (cmdsWin.length) {
				cmdsWin = cmdsWin.substring(0, cmdsWin.length-1);
			}
			if (cmdsUnix.length) {
				cmdsUnix = cmdsUnix.substring(0, cmdsUnix.length-1);
			}

			// store all command lines
			project.setProperty("selrunner.cmds.windows", cmdsWin);
			project.setProperty("selrunner.cmds.unix", cmdsUnix);
		]]>
		</script>
	</target>

	<taskdef resource="net/sf/antcontrib/antlib.xml">
	  <classpath>
	    <pathelement location="ant-contrib.jar"/>
	  </classpath>
	</taskdef>

</project>
