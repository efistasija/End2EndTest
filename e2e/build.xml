<?xml version="1.0" encoding="UTF-8"?>
<!--
	'run_tests' target installs protractor if it is not installed and  then runs protractor

	If you set 'sauceUser' and 'sauceKey' in protractorConfig.js the  tests will run on sauceLabs.

	To run on jenkins with saucelabs use 'run_tests' .
 	

-->
<project  default="run_tests">

	<!-- checks if used dependencies from package.json are outdated .Should be used manualy from time to time-->
	<target name="check_outdated">
		<exec executable="bash" dir="${basedir}" osfamily="unix"
					failonerror="true">
					<arg value="-c"/>
					<arg value="npm outdated"/>
		</exec>
		<exec executable="cmd" dir="${basedir}" osfamily="windows"
					failonerror="true">
					<arg value="/c" />
					<arg value="npm"/>
					<arg value="outdated"/>
		</exec>
	</target>
	 <!-- PROTRACTOR INSTALL TASKS -->
	 <!-- used to run install protractor only once -->
	 <target name="protractor_installed_check" >
		<echo message="Checking if protractor is installed."/>
	    <condition property="protractor.installed">
	      <available file="./node_modules" type="dir"/>
	    </condition>
	 </target>

	 <target name="load_properties">
	   <echo message="Loading properties."/>
	   <property file="test_properties.properies"/>
	</target>
	 
	 <target name="install_protractor_if_necessary" depends="protractor_installed_check" unless="protractor.installed">
	 	 <antcall target="install_protractor"/>
	 </target>

	<!-- installs protractor with it's dependencies  based on package.json file  run only once-->
	<target name="install_protractor">
		<echo message="Base dir: ${basedir}"/>
		<exec executable="cmd" dir="${basedir}" osfamily="windows"
			failonerror="true">
			<arg line="/c npm config set color false" />
		</exec>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
			failonerror="true">
			<arg value="-c" />
			<arg value="npm config set color false"/>
		</exec>

		<exec executable="cmd" dir="${basedir}" osfamily="windows"
			failonerror="true">
			<arg line="/c npm install" />
		</exec>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
			failonerror="true">
			<arg line="-c" />
			<arg value="npm install"/>
		</exec>
	</target>


<!-- RUNNING TASKS java -jar selenese-runner.jar -d phantomjs -b http://ronnie-samplengapp-dev.eu-gb.mybluemix.net/ -html-result results e2e\angularuibootstrap-buttons-radio -->
	<!-- use this target for jenkins and saucelabs .  It does not require selenium webdiver which is 44 mb -->
	<target name="run_tests_selenese" depends="load_properties">
		    <echo message="Run tests script started"/>
		    <echo message="basedir ${basedir}"/>
		    <echo message="solution name ${solution.name}"/>
			<!--<echo message="Testing solution: ${solution.name}"/>-->


		<exec executable="cmd" dir="${basedir}" osfamily="windows"
					failonerror="true">
					<arg value="/c"/>
					<arg value="java"/>
					<arg value="-jar"/>
					<arg value="selenese-runner.jar"/>
					<arg value="-c"/>
					<arg value="${selrunner.conf}"/>

					<arg value="-d" />
					<arg value="${selrunner.cmd.d}"/>
					<arg value="--${selrunner.cmd.driver}"/>
					<arg value="${selrunner.cmd.driverpath}"/>

					<arg value="${selrunner.tests}"/>
		</exec>

		<!--<property name="temp1" value="node ./node_modules/.bin/protractor -troubleshoot true ${protractor.conf} -params.solutionName=${solution.name}"/>
		<exec executable="bash" dir="${basedir}" osfamily="unix"
							failonerror="true">
			                <arg value="-c"/>
							<arg value="${temp1}"/>
		</exec>-->
	</target>

	<target name="run_tests" depends="load_properties">
		<script language="javascript">
		<![CDATA[
	 		importClass(java.io.File);
	        importClass(java.io.FileReader);
	        importClass(java.io.BufferedReader);
	        importClass(java.io.FileWriter);
	        importClass(java.io.BufferedWriter);
	        
	        // read properties from file selrunner.config.json
	        echo = project.createTask("echo");
	        echo.setMessage("Parsing selrunner.config.json");
	        echo.perform();
	        
	        var file = new File("selrunner.config.json");
	        fr = new FileReader(file);
	        br = new BufferedReader(fr);
	        
	        // Read the whole json file.
	        var json = "";
			do {
				var text = br.readLine();
				if (text) {
			    	json += text;
			    }
			} while (text)
			br.close();
	        
	        echo = project.createTask("echo");
	        echo.setMessage("Read selrunner.config.json");
	        echo.perform();

	        // Evaluate the JSON.
	        var struct = eval("(" + json + ")");
	        
	        // Run selenese-runner for each configuration in the selrunner.config.json
	        // It assumes the file is an Array of JSON objects well formatted
	        for (config in struct) {

	        	// execute in ${basedire} java -jar selenese-runner.jar -c ${selrunner.conf} ${selrunner.tests}
	        	var exec = project.createTask("exec");
	        	exec.setDir(new File(project.getProperty("basedir")));
	        	exec.setExecutable("cmd");
	        	exec.createArg().setValue("/c");
				exec.createArg().setValue("java");
				exec.createArg().setValue("-jar");
				exec.createArg().setValue("selenese-runner.jar");
				exec.createArg().setValue("-c");
				exec.createArg().setValue(project.getProperty("selrunner.conf"));

				// add each option specified in the selrunner.config
		        for (option in struct[config]) {
		            echo = project.createTask("echo");
		            echo.setMessage(option + "=" + struct[config][option]);
		            echo.perform();
		            exec.createArg().setValue(option);	// option key
		            exec.createArg().setValue(struct[config][option]);	// option value
		        }

		        // Include test for all solution names
		        var solutionNames = project.getProperty("solution.name").split(",");
		        for (var i =0; i<solutionNames.length; i++) {
		        	exec.createArg().setValue("ui_tests\\" + solutionNames[i].trim() + "\\*_test");
		        }
		        // TODO recursive query in directory. Node or Java ?

		        // execute tests
		       	exec.perform();
	        }


	        /*
			var browsers 	= ["chrome","phantomjs", "chrome"];
			var drivers 	= ["chromedriver","phantomjs", "chromedriver"];
			var driverpaths = ["drivers\\chromedriver.exe", "drivers\\phantomjs.exe", "drivers\\chromedriver.exe"];
			for (var i=0; i < browsers.length; i++) {
				project.setProperty("selrunner.cmd.d", browsers[i]);
				project.setProperty("selrunner.cmd.driver", drivers[i]);
				project.setProperty("selrunner.cmd.driverpath", driverpaths[i]);
				self.project.executeTarget( "test" );
			}*/
		]]>
		</script>
	</target>





</project>
